Метасимволы.
\w (word) Любой алфавитно-цифровой символ в верхнем и нижнем регистре и символ подчеркивания(тоже самое, что и [a-zA-Z0-9_]).
\W (not word) Любой символ не являющийся подчеркиванием и не относящийся к алфавитно-цифровым
\s (spaced charachter) любой пробельный символ (тоже самое, что [\r\n\f\v\t])
\S (not spaced charachter) Любой не пробельный символ (тоже самое, что [^\r\n\f\v\t])
\d (digit) любая цифра (digit)
\D (not digit) любой не цифровой символ (тоже самое, что [^0-9])
\v (вертикальная табуляция)
\t (табуляция)
\r (перевод каретки)
\n (перевод строки)
\f (перевод страницы)

Наборы символов
[RrGgBb] - Соответствие указанным символам
[a-z] Соответствие символам английского алфавита в нижнем регистре
[0-9] Соответствие указанным цифрам
[^0-9] Соответствие с чем угодно кроме цифр заданного диапазона

Квантификатор (Кванторы - сколько раз символ может встречаться)
+ Один или несколько символов - [abc]+ -> aabbcccbbaas
* ноль и более символов - [abc]\d* -> ac || ac1 || a1234
? ноль или одно вхождение - http[s]? -> http || https

Интервалы
{3} точное количество совпадений - \d{3} -> 123
{2,3} диапазон - \d{3, 5} -> 1234
{3,} не менее - \d{2,} -> >= 12 
{,3}  не более - \d{,2} -> <= 12

Якорные символы
^ Начало строки - ^\d{3} -> '123test'
$ Конец строки - \d{3}$ -> 'test123'
\b соответствует границе слова  - \b\d{3}\b -> 'la 123 la'

Флаги
i выполнение поиска не чувствительного к регистру.
g выполнение глобального поиска.
m многострочный режим.


So we have two types of regexp.
Literal - /some_pattern/igm;
From constructor - new RegExp("some_pattern", "igm");

From constructor regexp often created when you know vaue you want to match in runtime.

Regexp has two phases, compiling, and executing.
Compiling - when regexp pattern comtiling in JS inner object, and ready to be used.
Executing - when JS using this object.
Be aware that each regexp object is uniq, it's not chashed (maybe in some browser, but it's not a fact)
so /t/i and /t/i -> it's two different objects in cash, so we should create this object only once and 
use it further (preferably).

Five flags can be assosiated with regexp:
■ i — Makes the regex case-insensitive, so /test/i matches not only test, but also
Test, TEST, tEsT, and so on.
■ g — Matches all instances of the pattern, as opposed to the default of local, which
matches only the first occurrence. More on this later.
■ m — Allows matches across multiple lines, as might be obtained from the value of
a textarea element.
■ y — Enables sticky matching. A regular expression performs sticky matching in
the target string by attempting to match from the last match position.
■ u — Enables the use of Unicode point escapes (\u{...}).

Terms and opertors.
1. Exact matching: /some_exat_match/i
2. Matching from a "class of charachters". 
  Finite set of charachters that we want to match. [abc] - matcher only single charachter from set. To match anything, but a class
  add ^ inside brackets [^abc] - anything but "a, b, c". Also we can add "range" of values. [a-c] -> charachter from a to c (a, b, c).
3. Escaping - if we need some special charachter to match - escape it \^, \$, \-
4. Start and end of string - ^ start, $ end. Note tat ^ - overload of sighn, because it also means the negate class.
5. Repeat occurences. 
  ? - optional, may appear only once and may not. /t?est/ - "test", "est". NOT - "ttest"
  + - at least one or more. /t+est/ - "test", "tttest". NOT - "est"
  * - 0 || 1 || >1, /t*est/ - "est", "test", "ttest"
  {,2} - 0 || 1 || 2 - /t{,2}est/ exact number of repetition, "est", "test", "ttest". NOT - "tttest"
  {1, 2} - 1 || 2 - /t{1,2}est/ - "test", "ttest". NOT - "est", "tttest"
  {1,} - 1 || >1 - /t{1,}est/ - "test", "ttest". NOT - "est".

  Repetition opertors (?, +, *, {}) can be greedy or not greedy. By default, they’re greedy:
They will consume all the possible characters that make up a match. Annotating the
operator with a ? character (an overload of the ? operator), as in a+?, makes the operation
nongreedy: It will consume only enough characters to make a match.
For example, if we’re matching against the string aaa, the regular expression /a+/
would match all three a characters, whereas the nongreedy expression /a+?/ would
match only one a character, because a single a character is all that’s needed to satisfy
the a+ term.

