Two types of context:
  1.  Execution context.
  2.  Function context.

1.  Execution context: Stack trace (as execution context stack or call stack) is an order of execution contexts.
  a) Global execution context, only one. Where code is invoked first.
  b) Function execution context. What function is invoked, in what order. (don't mess with function context, "this")

  When func a call func b, function execution context paused, and function execution context of b is pushed onto stack.

2. Function context:
  In context of what object this function is running.

Lexical Environment (Scope, block of code) - is an internal JavaScript engine construct used to keep track of the 
  mapping from identifiers to specific variables. Lexical environments are an internal implementation of the JavaScript
  scoping mechanism, and people often colloquially refer to them as scopes.
  It created each time, function (or block) is invoked.

  Each function has [[Environment]] and [[Outer]] properties. When variable needs to be resolved, first it will be 
  searched in [[Environment]], inside the function scope, and then it will looked in [[Outer]] link to outer scope.
  
  (sic!) [[Outer]] link of the new created lexical environment (new function), the JavaScript engine puts
  the [[Environment]] of function that initiate newFunction creation, the environment in which the now-called
  function was created!

